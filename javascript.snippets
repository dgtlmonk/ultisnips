snippet enabler.init "Generic Enabler Initialize code"

if (Enabler.isInitialized()) {
    enablerInitHandler();
} else  {
    Enabler.addEventListener(studio.events.StudioEvent.INIT, enablerInitHandler);
}

function enablerInitHandler(e)  {

  // start ad init animation
  // load in your image assets
  // call Enabler methods ect ...
 
}
endsnippet

snippet us "use strict" !b
"use strict";
endsnippet

snippet be "beforeEach" !b
beforeEach (function(){
  $1;
});
endsnippet


snippet ae "afterEach" !b
afterEach(function(){
    
});
endsnippet



snippet fn "function" 
function $1(args){

}
endsnippet


snippet ng.conf "Angular Config"
app.config(function($stateProvider, $urlRouterProvider){
  $stateProvider
  .state('$1',{
      url:'/$1',
      templateUrl:'partials/$1.html'
  })
});
endsnippet

snippet ng.mod "Angular module"
var app = angular.module('$1',[]);
endsnippet


snippet ng.dir "Angular directive"
angular.module('myApp',[])
        .directive('$1', function(){
            return{
                restrict: 'E', // directive scope is Element A - Attribute, C - Classname
                replace: true, // replace original markup with Element
                transclude: false, // not to copy original HTML DOM

                link: function(scope, iElement, iAttrs, controller, transcludeFn) { // used only if the compile property is not defined

                },

                // compile: function(tElem, tAttrs) { // template Element, template attributes
                // },

                controller: function ($scope, $element, $attrs, $transclude, ){

                }
                // template: '' // template goes here if applicable
                // templateUrl: 'directives/partials/myDirectivePartial.html' //
            }
});
endsnippet
<<<<<<< HEAD

snippet fnc "function"
function $1(args) {

}
endsnippet

snippet c.l "console.log" !b
console.log($1);
endsnippet

snippet m.e "module exports" !b
module.exports = function($1) {

}
endsnippet

snippet gulp "gulp config init" !b
var gulp = require('gulp'),
    uglify = require('gulp-uglify'),
    livereload = require('gulp-livereload'),
    watch = require('gulp-watch'),
    connect = require('gulp-connect');

gulp.task('connect', function () {
    connect.server({
        root: ['./app'],
        port: 9001,
        browser: 'chrome',
            livereload: true // livereload
    });
});

// paths
var paths = {
        scripts: [],
        images:[],
       // html:['./app/*.html'],
       // js:['./app/scripts/*.js'],
      //  build_js:['./app/build/scripts/']
 }



// tasks ------
gulp.task('scripts', function () {
    return gulp.src(paths.js)
        .pipe(uglify())
        .pipe(gulp.dest('./app/build/scripts'))
        .pipe(connect.reload());
});

gulp.task('html', function(){
    gulp.src(paths.html)
        .pipe(connect.reload());
});

gulp.task('watch', function (argument) {
    gulp.watch(paths.html,['html']);
    gulp.watch(paths.js,['scripts']);
});


gulp.task('default',['watch','connect']);
endsnippet
=======
>>>>>>> 46ed82a64080bf8060b177d7e82971601f7b72b6
